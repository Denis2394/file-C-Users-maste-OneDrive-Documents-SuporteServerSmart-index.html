// Rob√¥ de WhatsApp para Suporte Server Smart
class WhatsAppBot {
    constructor() {
        this.clientes = new Map();
        this.formularios = new Map();
        this.adminPanel = 'https://seu-painel-admin.com/api/pedidos';
    }

    // Inicializar o bot
    async init() {
        console.log('ü§ñ Bot de WhatsApp iniciado');
        this.setupWebhook();
        this.criarFormularios();
    }

    // Configurar webhook para receber mensagens
    setupWebhook() {
        // Aqui voc√™ conectaria com a API do WhatsApp Business
        // Por enquanto, simularemos as respostas
        this.respostasAutomaticas = {
            'oi': this.menuPrincipal.bind(this),
            'ol√°': this.menuPrincipal.bind(this),
            'oi!': this.menuPrincipal.bind(this),
            'ol√°!': this.menuPrincipal.bind(this),
            'menu': this.menuPrincipal.bind(this),
            'ajuda': this.menuPrincipal.bind(this),
            'suporte': this.menuPrincipal.bind(this),
            '1': this.formularioSuporte.bind(this),
            '2': this.formularioPedido.bind(this),
            '3': this.formularioProblema.bind(this),
            '4': this.falarHumano.bind(this),
            'voltar': this.menuPrincipal.bind(this),
            'cancelar': this.menuPrincipal.bind(this)
        };
    }

    // Menu principal do bot
    menuPrincipal(numero) {
        const menu = `ü§ñ *SUPORTE SERVER SMART*

Ol√°! Sou o assistente virtual do Server Smart. Como posso ajud√°-lo hoje?

*Escolha uma op√ß√£o:*

1Ô∏è‚É£ *Formul√°rio de Suporte*
   - Solicitar suporte t√©cnico
   - Reportar problemas
   - D√∫vidas sobre servi√ßos

2Ô∏è‚É£ *Fazer Pedido*
   - Solicitar servi√ßos GSM
   - Pedir remotos
   - Alugar ferramentas

3Ô∏è‚É£ *Reportar Problema*
   - Problemas com servi√ßos
   - Bugs ou erros
   - Reclama√ß√µes

4Ô∏è‚É£ *Falar com Humano*
   - Atendimento personalizado
   - Emerg√™ncias

*Digite o n√∫mero da op√ß√£o desejada*`;

        this.enviarMensagem(numero, menu);
        this.clientes.set(numero, { estado: 'menu_principal' });
    }

    // Formul√°rio de Suporte
    formularioSuporte(numero) {
        const formulario = `üìã *FORMUL√ÅRIO DE SUPORTE*

Vou te ajudar a preencher o formul√°rio de suporte. Responda cada pergunta:

*1. Qual √© o seu nome completo?*`;

        this.enviarMensagem(numero, formulario);
        this.clientes.set(numero, { 
            estado: 'formulario_suporte',
            dados: {},
            etapa: 'nome'
        });
    }

    // Formul√°rio de Pedido
    formularioPedido(numero) {
        const formulario = `üõí *FORMUL√ÅRIO DE PEDIDO*

Vou te ajudar a fazer seu pedido. Responda cada pergunta:

*1. Qual √© o seu nome completo?*`;

        this.enviarMensagem(numero, formulario);
        this.clientes.set(numero, { 
            estado: 'formulario_pedido',
            dados: {},
            etapa: 'nome'
        });
    }

    // Formul√°rio de Problema
    formularioProblema(numero) {
        const formulario = `‚ö†Ô∏è *REPORTAR PROBLEMA*

Vou te ajudar a reportar o problema. Responda cada pergunta:

*1. Qual √© o seu nome completo?*`;

        this.enviarMensagem(numero, formulario);
        this.clientes.set(numero, { 
            estado: 'formulario_problema',
            dados: {},
            etapa: 'nome'
        });
    }

    // Falar com humano
    falarHumano(numero) {
        const mensagem = `üë®‚Äçüíº *ATENDIMENTO HUMANO*

Voc√™ ser√° direcionado para um atendente humano em breve.

*Enquanto isso, voc√™ pode:*
- Descrever brevemente seu problema
- Informar se √© urgente
- Deixar seu hor√°rio preferido

*Um atendente entrar√° em contato em at√© 10 minutos.*`;

        this.enviarMensagem(numero, mensagem);
        this.notificarAdmin(numero, 'SOLICITA√á√ÉO_ATENDIMENTO_HUMANO', {
            numero: numero,
            tipo: 'atendimento_humano',
            timestamp: new Date().toISOString()
        });
    }

    // Processar mensagem recebida
    async processarMensagem(numero, mensagem) {
        const cliente = this.clientes.get(numero) || { estado: 'menu_principal' };
        
        // Se √© uma resposta de formul√°rio
        if (cliente.estado.includes('formulario')) {
            return this.processarFormulario(numero, mensagem, cliente);
        }

        // Se √© uma op√ß√£o do menu
        const resposta = this.respostasAutomaticas[mensagem.toLowerCase()];
        if (resposta) {
            resposta(numero);
            return;
        }

        // Resposta padr√£o
        this.menuPrincipal(numero);
    }

    // Processar respostas do formul√°rio
    async processarFormulario(numero, mensagem, cliente) {
        const { estado, dados, etapa } = cliente;

        switch (etapa) {
            case 'nome':
                dados.nome = mensagem;
                cliente.etapa = 'whatsapp';
                this.enviarMensagem(numero, '*2. Qual √© o seu WhatsApp?*');
                break;

            case 'whatsapp':
                dados.whatsapp = mensagem;
                cliente.etapa = 'anydesk';
                this.enviarMensagem(numero, '*3. Qual √© o seu Anydesk?*');
                break;

            case 'anydesk':
                dados.anydesk = mensagem;
                cliente.etapa = 'modelo';
                this.enviarMensagem(numero, '*4. Qual √© o modelo do dispositivo?*');
                break;

            case 'modelo':
                dados.modelo = mensagem;
                cliente.etapa = 'descricao';
                
                let perguntaDescricao = '';
                if (estado === 'formulario_suporte') {
                    perguntaDescricao = '*5. Descreva o problema ou d√∫vida:*';
                } else if (estado === 'formulario_pedido') {
                    perguntaDescricao = '*5. Qual servi√ßo voc√™ deseja? (GSM, Remoto, Ferramenta)*';
                } else if (estado === 'formulario_problema') {
                    perguntaDescricao = '*5. Descreva o problema detalhadamente:*';
                }
                
                this.enviarMensagem(numero, perguntaDescricao);
                break;

            case 'descricao':
                dados.descricao = mensagem;
                cliente.etapa = 'finalizar';
                
                // Finalizar formul√°rio
                await this.finalizarFormulario(numero, dados, estado);
                break;
        }

        this.clientes.set(numero, cliente);
    }

    // Finalizar formul√°rio e enviar para admin
    async finalizarFormulario(numero, dados, tipo) {
        const confirmacao = `‚úÖ *FORMUL√ÅRIO CONCLU√çDO!*

*Dados coletados:*
üë§ Nome: ${dados.nome}
üì± WhatsApp: ${dados.whatsapp}
üíª Anydesk: ${dados.anydesk}
üì± Modelo: ${dados.modelo}
üìù Descri√ß√£o: ${dados.descricao}

*Seu formul√°rio foi enviado para nossa equipe!*
Em breve entraremos em contato.

*Obrigado por escolher Server Smart!* üöÄ`;

        this.enviarMensagem(numero, confirmacao);

        // Enviar dados para o painel admin
        await this.enviarParaAdmin(numero, dados, tipo);

        // Limpar dados do cliente
        this.clientes.delete(numero);
    }

    // Enviar dados para o painel admin
    async enviarParaAdmin(numero, dados, tipo) {
        const pedido = {
            numero_cliente: numero,
            tipo_formulario: tipo,
            dados: dados,
            timestamp: new Date().toISOString(),
            status: 'novo'
        };

        try {
            // Aqui voc√™ enviaria para seu painel admin
            console.log('üì§ Enviando para admin:', pedido);
            
            // Simular envio para localStorage (para demonstra√ß√£o)
            const pedidos = JSON.parse(localStorage.getItem('pedidosWhatsApp') || '[]');
            pedidos.push(pedido);
            localStorage.setItem('pedidosWhatsApp', JSON.stringify(pedidos));
            
            // Notificar admin via webhook
            await this.notificarAdmin(numero, tipo, pedido);
            
        } catch (error) {
            console.error('‚ùå Erro ao enviar para admin:', error);
        }
    }

    // Notificar admin
    async notificarAdmin(numero, tipo, dados) {
        const notificacao = {
            numero: numero,
            tipo: tipo,
            dados: dados,
            timestamp: new Date().toISOString()
        };

        // Aqui voc√™ implementaria a notifica√ß√£o real para o admin
        console.log('üîî Notifica√ß√£o para admin:', notificacao);
    }

    // Enviar mensagem (simulado)
    enviarMensagem(numero, mensagem) {
        console.log(`üì± Enviando para ${numero}:`, mensagem);
        // Aqui voc√™ implementaria o envio real via API do WhatsApp
    }

    // Criar formul√°rios
    criarFormularios() {
        this.formularios.set('suporte', {
            titulo: 'Formul√°rio de Suporte',
            campos: ['nome', 'whatsapp', 'anydesk', 'modelo', 'descricao']
        });

        this.formularios.set('pedido', {
            titulo: 'Formul√°rio de Pedido',
            campos: ['nome', 'whatsapp', 'anydesk', 'modelo', 'servico']
        });

        this.formularios.set('problema', {
            titulo: 'Reportar Problema',
            campos: ['nome', 'whatsapp', 'anydesk', 'modelo', 'descricao']
        });
    }
}

// Inicializar o bot
const bot = new WhatsAppBot();
bot.init();

// Exportar para uso global
window.WhatsAppBot = bot; 